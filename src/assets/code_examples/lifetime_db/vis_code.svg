<svg height="1810px" width="1350px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>examples/lifetime_db/input/</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 0.875em;
    font-family: "Open Sans", sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    fill: #6e6b5e;
    white-space: pre;
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-size: 0.875em;
}
text.funcSigCode {
    fill: #13b516;
    font-weight: bold;
    white-space: pre;
    font-family: monospace;
    font-size: 1.2em;
}

text.structInstance {
    fill: rgba(10,29,242,0.906);
    white-space: pre;
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-weight: bold;
    font-size: 0.875em;
}

text.masterInstance {
    fill: rgba(242,23,184,0.906);
    white-space: pre;
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-weight: bold;
    font-size: 0.875em;
}

text.lifetime{
    fill: #eca163;
    white-space: pre;
    font-family: monospace;
    font-size: 1em;
}

text.label {
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-size: 0.875em;
}
text.label_lifetime{
    font-family: "Source Code Pro", Monaco, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-size: 0.875em;

}


/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow {
    stroke-width: 1.5;
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.functionIcon {
    paint-order: stroke;
    stroke-width: 3px;
    fill: var(--bg-color);
    font-size: 20px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

.functionLogo {
    font-size: 20px;
    font-style: italic;
    paint-order: stroke;
    stroke-width: 3px;
    fill: var(--bg-color) !important;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 0;
}

.lineNumDashLine{
    stroke: #6c6a6a; 
    stroke-width: 2; 
    stroke-dasharray: 5 3; 
    stroke-opacity: 0.5;
}



text.lineNum{
    fill: rgba(90,92,90,0.795);
    font-family: monospace;
    font-size: 0.875em;
}
object.tl_panel {
    flex-grow: 1;
}

object.code_panel {
    flex-grow: 0;
}

.tooltip-trigger {
    cursor: default;
}

.tooltip-trigger:hover{
    filter: url(#glow);
}

/* hash based styling */
[data-hash="0"] {
    fill: #6e6b5e;
}

[data-hash="1"] {
    fill: #1893ff;
    stroke: #1893ff;
}

[data-hash="2"] {
    fill: #ff7f50;
    stroke: #ff7f50;
}

[data-hash="3"] {
    fill: #8635ff;
    stroke: #8635ff;
}

[data-hash="4"] {
    fill: #dc143c;
    stroke: #dc143c;
}

[data-hash="5"] {
    fill: #0a810a;
    stroke: #0a810a;
}

[data-hash="6"] {
    fill: #008080;
    stroke: #008080;
}

[data-hash="7"] {
    fill: #ff6cce;
    stroke: #ff6cce;
}

[data-hash="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash="9"] {
    fill: #b99f35;
    stroke: #b99f35;
}

[lifetime-body="a"]{
    fill: #dc143c;
    stroke: #dc143c;
}
[lifetime-dash="a"]{
    fill: rgba(220,20,60,0.451);
    stroke: rgba(220,20,60,0.469);
}

[lifetime-body-hash="0"]{
    fill: #47b2df;
    stroke: #47b2df;
}

[lifetime-dash-hash="0"]{
    fill: rgba(71,177,223,0.600);
    stroke: rgba(71,177,223,0.600);
}

[lifetime-reg-hash="0"]{
    stroke: rgba(71,177,223,0.600);
}

[lifetime-body-hash="1"]{
    fill: #03b72a;
    stroke: #03b72a;
}
[lifetime-dash-hash="1"]{
    fill: rgba(3,183,42,0.600);
    stroke:rgba(3,183,42,0.600);
}

[lifetime-reg-hash="1"]{
    stroke:rgba(3,183,42,0.600);
}

[lifetime-body-hash="2"]{
    fill: #e98615;
    stroke: #e98615;
}
[lifetime-dash-hash="2"]{
    fill: rgba(233,134,21,0.600);
    stroke: rgba(233,134,21,0.600);
}

[lifetime-reg-hash="2"]{
    stroke: rgba(233,134,21,0.600);
}

[lifetime-body-hash="3"]{
    fill: #f10dde;
    stroke: #f10dde;
}
[lifetime-dash-hash="3"]{
    fill: rgba(241,13,222,0.600);
    stroke: rgba(241,13,222,0.600);
}

[lifetime-reg-hash="3"]{
    stroke: rgba(241,13,222,0.600);
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> <tspan fill="#AAA">1  </tspan>fn main() { </text>
        <text class="code" x="20" y="120"> <tspan fill="#AAA">2  </tspan>    // requests, resources generated by main thread </text>
        <text class="code" x="20" y="150"> <tspan fill="#AAA">3  </tspan>    let mut available_resource: u32 = 60; </text>
        <text class="code" x="20" y="180"> <tspan fill="#AAA">4  </tspan>    let mut request_queue: VecDeque&lt;&amp;mut Request&gt; = VecDeque::new(); </text>
        <text class="code" x="20" y="210"> <tspan fill="#AAA">5  </tspan>    let reads_cnt: u32 = 20; </text>
        <text class="code" x="20" y="240"> <tspan fill="#AAA">6  </tspan>    let mut RD_rq: Request = Request::new(reads_cnt, RequestType::READ); </text>
        <text class="code" x="20" y="270"> <tspan fill="#AAA">7  </tspan>    request_queue.push_back(<tspan data-hash="2">&amp;mut RD_rq</tspan>); </text>
        <text class="code" x="20" y="300"> <tspan fill="#AAA">8  </tspan>    let updates_cnt: u32 = 30; </text>
        <text class="code" x="20" y="330"> <tspan fill="#AAA">9  </tspan>    let mut UD_rq: Request = Request::new(updates_cnt, RequestType::UPDATE); </text>
        <text class="code" x="20" y="360"> <tspan fill="#AAA">10  </tspan>    request_queue.push_back(<tspan data-hash="3">&amp;mut UD_rq</tspan>); </text>
        <text class="code" x="20" y="390"> <tspan fill="#AAA">11  </tspan>    let deletes_cnt: u32 =50; </text>
        <text class="code" x="20" y="420"> <tspan fill="#AAA">12  </tspan>    let mut DL_rq: Request = Request::new(deletes_cnt, RequestType::DELETE); </text>
        <text class="code" x="20" y="450"> <tspan fill="#AAA">13  </tspan>    request_queue.push_back(<tspan data-hash="4">&amp;mut DL_rq</tspan>); </text>
        <text class="code" x="20" y="480"> <tspan fill="#AAA">14  </tspan>    // ..., process requests in multi-threading way ... </text>
        <text class="code" x="20" y="510"> <tspan fill="#AAA">15  </tspan>    // this might be another thread that deal with request processing ... </text>
        <text class="code" x="20" y="540"> <tspan fill="#AAA">16  </tspan>    let <tspan data-hash="5">ptr_to_resource</tspan> = &amp;mut available_resource; </text>
        <text class="code" x="20" y="570"> <tspan fill="#AAA">17  </tspan>    let <tspan data-hash="6">request_halfway</tspan> = process_requests(<tspan data-hash="1">&amp;mut request_queue</tspan>, <tspan data-hash="5">ptr_to_resource</tspan>); </text>
        <text class="code" x="20" y="600"> <tspan fill="#AAA">18  </tspan>    if let Some(req) = <tspan data-hash="6">request_halfway</tspan> { </text>
        <text class="code" x="20" y="630"> <tspan fill="#AAA">19  </tspan>        println!("#{} of {} requests are left unprocessed!", req.num_request_left, req.request_type.to_string()); </text>
        <text class="code" x="20" y="660"> <tspan fill="#AAA">20  </tspan>    } </text>
        <text class="code" x="20" y="690"> <tspan fill="#AAA">21  </tspan>    println!("there are #{} free resource left.", available_resource); </text>
        <text class="code" x="20" y="720"> <tspan fill="#AAA">22  </tspan>} </text>
        <text class="code" x="20" y="750"> <tspan fill="#AAA">23  </tspan> </text>
        <text class="code" x="20" y="780"> <tspan fill="#AAA">24  </tspan>fn process_requests&lt;'i,'a&gt;(queue: &amp;'i mut VecDeque&lt;&amp;'i mut Request&lt;'i&gt;&gt;, max_process_unit: &amp;'a mut u32) -&gt; Option&lt;&amp;'i mut Request&lt;'i&gt;&gt;{ </text>
        <text class="code" x="20" y="810"> <tspan fill="#AAA">25  </tspan>    loop { </text>
        <text class="code" x="20" y="840"> <tspan fill="#AAA">26  </tspan>        let front_request: Option&lt;&amp;mut Request&gt; = queue.pop_front(); </text>
        <text class="code" x="20" y="870"> <tspan fill="#AAA">27  </tspan>        if let Some(request) = front_request{ </text>
        <text class="code" x="20" y="900"> <tspan fill="#AAA">28  </tspan>            // if current max_process_unit is greater than current requests </text>
        <text class="code" x="20" y="930"> <tspan fill="#AAA">29  </tspan>            if request.num_request_left &lt;= max_process_unit{ </text>
        <text class="code" x="20" y="960"> <tspan fill="#AAA">30  </tspan>                println!("Served #{} of {} requests.", request.num_request_left, request.request_type.to_string()); </text>
        <text class="code" x="20" y="990"> <tspan fill="#AAA">31  </tspan>                // decrement the amount of resource spent on this request </text>
        <text class="code" x="20" y="1020"> <tspan fill="#AAA">32  </tspan>                *max_process_unit = *max_process_unit - *request.num_request_left; </text>
        <text class="code" x="20" y="1050"> <tspan fill="#AAA">33  </tspan>                // signify this request has been processed </text>
        <text class="code" x="20" y="1080"> <tspan fill="#AAA">34  </tspan>                *request.num_request_left = 0; </text>
        <text class="code" x="20" y="1110"> <tspan fill="#AAA">35  </tspan>            } </text>
        <text class="code" x="20" y="1140"> <tspan fill="#AAA">36  </tspan>            // not enough </text>
        <text class="code" x="20" y="1170"> <tspan fill="#AAA">37  </tspan>            else{ </text>
        <text class="code" x="20" y="1200"> <tspan fill="#AAA">38  </tspan>                // process as much as we can </text>
        <text class="code" x="20" y="1230"> <tspan fill="#AAA">39  </tspan>                *request.num_request_left = *request.num_request_left - *max_process_unit; </text>
        <text class="code" x="20" y="1260"> <tspan fill="#AAA">40  </tspan>                // sad, no free resource anymore </text>
        <text class="code" x="20" y="1290"> <tspan fill="#AAA">41  </tspan>                *max_process_unit = 0; </text>
        <text class="code" x="20" y="1320"> <tspan fill="#AAA">42  </tspan>                // enqueue the front request back to queue, hoping someone will handle it... </text>
        <text class="code" x="20" y="1350"> <tspan fill="#AAA">43  </tspan>                // queue.push_front(request); </text>
        <text class="code" x="20" y="1380"> <tspan fill="#AAA">44  </tspan>                return Option::Some(request); </text>
        <text class="code" x="20" y="1410"> <tspan fill="#AAA">45  </tspan>            } </text>
        <text class="code" x="20" y="1440"> <tspan fill="#AAA">46  </tspan>            // </text>
        <text class="code" x="20" y="1470"> <tspan fill="#AAA">47  </tspan>        } </text>
        <text class="code" x="20" y="1500"> <tspan fill="#AAA">48  </tspan>        else { </text>
        <text class="code" x="20" y="1530"> <tspan fill="#AAA">49  </tspan>            // no available request to process, ooh-yeah! </text>
        <text class="code" x="20" y="1560"> <tspan fill="#AAA">50  </tspan>            return Option::None; </text>
        <text class="code" x="20" y="1590"> <tspan fill="#AAA">51  </tspan> </text>
        <text class="code" x="20" y="1620"> <tspan fill="#AAA">52  </tspan>        } </text>
        <text class="code" x="20" y="1650"> <tspan fill="#AAA">53  </tspan>    } </text>
        <text class="code" x="20" y="1680"> <tspan fill="#AAA">54  </tspan>} </text>
        <text class="code" x="20" y="1710"> <tspan fill="#AAA">55  </tspan> </text>
    </g>

   
</svg>